distance_matrix%>%
#Selects only the origin hospital distance and the name columns
select(origin, name) %>%
#Filters to the bottom 6 distances (includes distance between hospital and itself)
top_n(-(count+1), !!as.name(origin)) %>%
#Drops the instance where the distance between a hospital and itself is 0
filter(name != origin) %>%
#Orders the results
arrange(!!as.name(origin)) %>%
#Adds a column with the origin hospital name (passed into the function)
cbind(hospital = origin) %>%
#Renames columns
`colnames<-`(c('distance','target','origin')) %>%
return()
}
linestring_func <- function(origin, target){
hospital_df %>%
# Filters to the two names we are connecting
filter(names == origin | names == target) %>%
# Extracts the raw coordinates of the two points
st_coordinates() %>%
# Creates a linestring
st_linestring() %>%
return()
}
get_dist <- function(origin, target){
return(filter(zz$target_points, `Received From` == origin, names == target)[['Patients Received']])
}
for (i in 1:jumps){
if (i == 1){
origin_point<-hospital_df %>%
filter(names == origin_name) %>%
mutate(map_icon = as.character(i))
target_names <- close_checker(origin = origin_point$names, distance_matrix = distance_matrix, count = 8)
attrition_vals <- num_splitter(current_count, length(target_names$target)+1)
origin_point <- origin_point %>%
mutate(stayed = attrition_vals[1])
target_points <- hospital_df %>%
filter(names %in% target_names$target) %>%
mutate(map_icon = as.character(i+1)) %>%
cbind(attrition_vals[2:length(attrition_vals)]) %>%
rename(`Patients Received` = attrition_vals.2.length.attrition_vals..) %>%
mutate(`Patients Stayed` = 0, `Received From` = origin_name, `Total Patients Received` = `Patients Received`)
pre_lines <- target_names %>% mutate(ls = map2(origin, target, linestring_func))
lines<- st_sf(origin = pre_lines$origin,
target=pre_lines$target,
geometry = st_sfc(pre_lines$ls, crs = 4326),
dim = 'XY',
row.names = NULL)
bads <- append(bads, c(origin_name, as.character(target_names$target)))
}
else{
if (i == 2){
origins <- target_names$target
used_targets <- c()
}
else{
origins <- used_targets
used_targets <- c()
}
for (o in unique(origins)){
target_names <- close_checker(origin = o, distance_matrix = distance_matrix, count = scans)
target_names <- target_names %>%
filter(!as.character(target) %in% bads)
target_points_temp <- hospital_df %>%
filter(names %in% target_names$target) %>%
mutate(map_icon = as.character(i+1))
if (nrow(target_names) != 0){
attrition_vals <- num_splitter(filter(target_points, names == o)[['Total Patients Received']], length(target_names$target)+1)
target_points[target_points$names==o, 'Patients Stayed'] <- attrition_vals[1]
target_points_temp <- target_points_temp %>%
cbind(attrition_vals[2:length(attrition_vals)]) %>%
rename(`Patients Received` = attrition_vals.2.length.attrition_vals..) %>%
mutate(`Patients Stayed` = 0, `Received From` = o, `Total Patients Received` = 0)
target_points <- rbind(target_points, target_points_temp)
pre_lines <- target_names %>% mutate(ls = map2(origin, target, linestring_func))
lines_temp<- st_sf(origin = pre_lines$origin,
target=pre_lines$target,
geometry = st_sfc(pre_lines$ls, crs = 4326),
dim = 'XY',
row.names = NULL)
lines <- rbind(lines, lines_temp)
}
if (nrow(target_names) == 0){
target_points[target_points$names==o, 'Patients Stayed'] <- filter(target_points, names == o)[['Patients Received']]
}
used_targets <- append(used_targets, as.character(target_names$target))
}
bads<-append(bads, as.character(used_targets))
target_points <- target_points %>% group_by(names) %>% mutate(`Total Patients Received` = sum(`Patients Received`))
}
}
lines<-lines %>%
mutate(`Patients Transferred` = map2_dbl(origin, target, get_dist))
return(list(origin_point = origin_point, target_points = target_points, lines = lines))
}
num_splitter<- function(val, segs){
op <- rmultinom(n = 1, size = val, prob = rep(1/segs, segs))
return(op)
}
xx<-network_link(hospitals, 'Adcare Hospital of Worcester' , 50000, dist_matrix, 3, 10)
library(sf)
library(shiny)
library(spData)
library(leaflet)
library(tidyverse)
library(shinyjs)
library(tmaptools)
hospitals <- readRDS('hospitals.rds')
dist_matrix <- readRDS('distance_matrix.rds')
network_link <- function(hospital_df, origin_name, current_count, distance_matrix, jumps, scans){
bads <- c()
bads<- append(bads, origin_name)
close_checker <- function(distance_matrix, origin, count = 5){
distance_matrix%>%
#Selects only the origin hospital distance and the name columns
select(origin, name) %>%
#Filters to the bottom 6 distances (includes distance between hospital and itself)
top_n(-(count+1), !!as.name(origin)) %>%
#Drops the instance where the distance between a hospital and itself is 0
filter(name != origin) %>%
#Orders the results
arrange(!!as.name(origin)) %>%
#Adds a column with the origin hospital name (passed into the function)
cbind(hospital = origin) %>%
#Renames columns
`colnames<-`(c('distance','target','origin')) %>%
return()
}
linestring_func <- function(origin, target){
hospital_df %>%
# Filters to the two names we are connecting
filter(names == origin | names == target) %>%
# Extracts the raw coordinates of the two points
st_coordinates() %>%
# Creates a linestring
st_linestring() %>%
return()
}
get_dist <- function(origin, target){
return(filter(target_points, `Received From` == origin, names == target)[['Patients Received']])
}
for (i in 1:jumps){
if (i == 1){
origin_point<-hospital_df %>%
filter(names == origin_name) %>%
mutate(map_icon = as.character(i))
target_names <- close_checker(origin = origin_point$names, distance_matrix = distance_matrix, count = 8)
attrition_vals <- num_splitter(current_count, length(target_names$target)+1)
origin_point <- origin_point %>%
mutate(stayed = attrition_vals[1])
target_points <- hospital_df %>%
filter(names %in% target_names$target) %>%
mutate(map_icon = as.character(i+1)) %>%
cbind(attrition_vals[2:length(attrition_vals)]) %>%
rename(`Patients Received` = attrition_vals.2.length.attrition_vals..) %>%
mutate(`Patients Stayed` = 0, `Received From` = origin_name, `Total Patients Received` = `Patients Received`)
pre_lines <- target_names %>% mutate(ls = map2(origin, target, linestring_func))
lines<- st_sf(origin = pre_lines$origin,
target=pre_lines$target,
geometry = st_sfc(pre_lines$ls, crs = 4326),
dim = 'XY',
row.names = NULL)
bads <- append(bads, c(origin_name, as.character(target_names$target)))
}
else{
if (i == 2){
origins <- target_names$target
used_targets <- c()
}
else{
origins <- used_targets
used_targets <- c()
}
for (o in unique(origins)){
target_names <- close_checker(origin = o, distance_matrix = distance_matrix, count = scans)
target_names <- target_names %>%
filter(!as.character(target) %in% bads)
target_points_temp <- hospital_df %>%
filter(names %in% target_names$target) %>%
mutate(map_icon = as.character(i+1))
if (nrow(target_names) != 0){
attrition_vals <- num_splitter(filter(target_points, names == o)[['Total Patients Received']], length(target_names$target)+1)
target_points[target_points$names==o, 'Patients Stayed'] <- attrition_vals[1]
target_points_temp <- target_points_temp %>%
cbind(attrition_vals[2:length(attrition_vals)]) %>%
rename(`Patients Received` = attrition_vals.2.length.attrition_vals..) %>%
mutate(`Patients Stayed` = 0, `Received From` = o, `Total Patients Received` = 0)
target_points <- rbind(target_points, target_points_temp)
pre_lines <- target_names %>% mutate(ls = map2(origin, target, linestring_func))
lines_temp<- st_sf(origin = pre_lines$origin,
target=pre_lines$target,
geometry = st_sfc(pre_lines$ls, crs = 4326),
dim = 'XY',
row.names = NULL)
lines <- rbind(lines, lines_temp)
}
if (nrow(target_names) == 0){
target_points[target_points$names==o, 'Patients Stayed'] <- filter(target_points, names == o)[['Patients Received']]
}
used_targets <- append(used_targets, as.character(target_names$target))
}
bads<-append(bads, as.character(used_targets))
target_points <- target_points %>% group_by(names) %>% mutate(`Total Patients Received` = sum(`Patients Received`))
}
}
lines<-lines %>%
mutate(`Patients Transferred` = map2_dbl(origin, target, get_dist))
return(list(origin_point = origin_point, target_points = target_points, lines = lines))
}
num_splitter<- function(val, segs){
op <- rmultinom(n = 1, size = val, prob = rep(1/segs, segs))
return(op)
}
make_line_label <- function(index, df){
f <- slice(df, index)
label<- sprintf(
"<strong>Origin:</strong> %s<br/> <strong>Destination:</strong> %s<br/> <strong>Patients Transferred:</strong> %g</sup>",
f$origin, f$target, f[['Patients Transferred']]
)%>% lapply(htmltools::HTML)
return(label)
}
make_target_labels <- function(df){
label<- sprintf(
"<strong>Hospital Name:</strong> %s<br/> <strong>Patients Received:</strong> %g<br/> <strong>Patients Discharged to Home:</strong> %g<br/> <strong>Patients Further Transferred:</strong> %g</sup>",
df$names, df[['Total Patients Received']], df['Patients Stayed'], df[['Patients Transferred']]-df[['Patients Stayed']]
)%>% lapply(htmltools::HTML)
return(label)
}
xx<-network_link(hospitals, 'Adcare Hospital of Worcester' , 50000, dist_matrix, 3, 10)
t <- xx$target_points
make_target_labels(t)
z <- make_target_labels(t)
t
make_target_labels <- function(df){
label<- sprintf(
"<strong>Hospital Name:</strong> %s<br/> <strong>Patients Received:</strong> %g<br/> <strong>Patients Discharged to Home:</strong> %g<br/> <strong>Patients Further Transferred:</strong> %g</sup>",
df$names, df[['Total Patients Received']], df['Patients Stayed'], (df[['Patients Transferred']]-df[['Patients Stayed']])
)%>% lapply(htmltools::HTML)
return(label)
}
make_target_labels(t)
make_target_labels <- function(df){
df %>% mutate(outgoing_transfer = ``)
label<- sprintf(
"<strong>Hospital Name:</strong> %s<br/> <strong>Patients Received:</strong> %g<br/> <strong>Patients Discharged to Home:</strong> %g<br/> <strong>Patients Further Transferred:</strong> %g</sup>",
df$names, df[['Total Patients Received']], df['Patients Stayed'], (df[['Patients Transferred']]-df[['Patients Stayed']])
)%>% lapply(htmltools::HTML)
return(label)
}
make_target_labels <- function(df){
df %>% mutate(outgoing_transfer = `Patients Transferred` - `Patients Stayed`)
label<- sprintf(
"<strong>Hospital Name:</strong> %s<br/> <strong>Patients Received:</strong> %g<br/> <strong>Patients Discharged to Home:</strong> %g<br/> <strong>Patients Further Transferred:</strong> %g</sup>",
df$names, df[['Total Patients Received']], df['Patients Stayed'], (df[['Patients Transferred']]-df[['Patients Stayed']])
)%>% lapply(htmltools::HTML)
return(label)
}
make_target_labels(t)
t
make_target_labels <- function(df){
df %>% mutate(outgoing_transfer = `Total Patients Received` - `Patients Stayed`)
label<- sprintf(
"<strong>Hospital Name:</strong> %s<br/> <strong>Patients Received:</strong> %g<br/> <strong>Patients Discharged to Home:</strong> %g<br/> <strong>Patients Further Transferred:</strong> %g</sup>",
df$names, df[['Total Patients Received']], df['Patients Stayed'], df$outgoing_transfer
)%>% lapply(htmltools::HTML)
return(label)
}
make_target_labels(t)
make_target_labels <- function(df){
df<-df %>% mutate(outgoing_transfer = `Total Patients Received` - `Patients Stayed`)
label<- sprintf(
"<strong>Hospital Name:</strong> %s<br/> <strong>Patients Received:</strong> %g<br/> <strong>Patients Discharged to Home:</strong> %g<br/> <strong>Patients Further Transferred:</strong> %g</sup>",
df$names, df[['Total Patients Received']], df['Patients Stayed'], df$outgoing_transfer
)%>% lapply(htmltools::HTML)
return(label)
}
make_target_labels(t)
t
tt<- t %>% mutate(outgoing_transfer = `Total Patients Received` - `Patients Stayed`)
t
View(tt)
make_target_labels(t)
typeof(t[['Total Patients Received']])
typeof(t[['Patients Stayed']])
typeof(tt$outgoing_transfer)
make_target_labels <- function(df){
df<-df %>% mutate(outgoing_transfer = `Total Patients Received` - `Patients Stayed`)
label<- sprintf(
"<strong>Hospital Name:</strong> %s<br/> <strong>Patients Received:</strong> %g<br/> <strong>Patients Discharged to Home:</strong> %g<br/> <strong>Patients Further Transferred:</strong> %g</sup>",
df$names, as.double(df[['Total Patients Received']]), df['Patients Stayed'], df$outgoing_transfer
)%>% lapply(htmltools::HTML)
return(label)
}
make_target_labels(t)
View(t)
make_target_labels <- function(df){
df<-df %>% mutate(outgoing_transfer = `Total Patients Received` - `Patients Stayed`)
label<- sprintf(
"<strong>Hospital Name:</strong> %s<br/> <strong>Patients Received:</strong> %g<br/> <strong>Patients Discharged to Home:</strong> %g</sup>",
df$names, df[['Total Patients Received']], df['Patients Stayed']
)%>% lapply(htmltools::HTML)
return(label)
}
make_target_labels(t)
t
make_target_labels <- function(df){
df<-df %>% mutate(outgoing_transfer = `Total Patients Received` - `Patients Stayed`)
label<- sprintf(
"<strong>Hospital Name:</strong> %s<br/> <strong>Patients Received:</strong> %g</sup>",
df$names, df[['Total Patients Received']]
)%>% lapply(htmltools::HTML)
return(label)
}
make_target_labels(t)
make_target_labels <- function(df){
df<-df %>% mutate(outgoing_transfer = `Total Patients Received` - `Patients Stayed`)
label<- sprintf(
"<strong>Hospital Name:</strong> %s<br/> <strong>Patients Received:</strong> %g<br/> <strong>Patients Discharged to Home:</strong> %g</sup>",
df$names, df[['Total Patients Received']], df['Total Patients Received']
)%>% lapply(htmltools::HTML)
return(label)
}
make_target_labels(t)
make_target_labels <- function(df){
df<-df %>% mutate(outgoing_transfer = `Total Patients Received` - `Patients Stayed`)
label<- sprintf(
"<strong>Hospital Name:</strong> %s<br/> <strong>Patients Received:</strong> %g<br/> <strong>Patients Discharged to Home:</strong> %s</sup>",
df$names, df[['Total Patients Received']], df$names
)%>% lapply(htmltools::HTML)
return(label)
}
make_target_labels(t)
make_target_labels <- function(df){
df<-df %>% mutate(outgoing_transfer = `Total Patients Received` - `Patients Stayed`)
label<- sprintf(
"<strong>Hospital Name:</strong> %s<br/> <strong>Patients Received:</strong> %g<br/> <strong>Patients Discharged to Home:</strong> %s</sup>",
df$names, df[['Total Patients Received']], df[['Total Patients Received']]
)%>% lapply(htmltools::HTML)
return(label)
}
make_target_labels(t)
t
make_target_labels <- function(df){
df<-df %>% mutate(outgoing_transfer = `Total Patients Received` - `Patients Stayed`)
label<- sprintf(
"<strong>Hospital Name:</strong> %s<br/> <strong>Patients Received:</strong> %s<br/> <strong>Patients Discharged to Home:</strong> %s<br/> <strong>Patients Transferred Further:</strong> %s</sup>",
df$names, df[['Total Patients Received']], df[['Patients Stayed']], df$outgoing_transfer
)%>% lapply(htmltools::HTML)
return(label)
}
make_target_labels(t)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?addPolylines
runApp()
runApp()
runApp()
runApp()
runApp()
?addLegend
runApp()
runApp()
runApp()
runApp()
runApp()
?labelOptions
runApp()
runApp()
runApp()
rsconnect::setAccountInfo(name='maxpohlman',
token='DABABA0A96F91456F89EC9B246DD9386',
secret='g3WDOkq/JtTnACNYYCrsF7gS5WnsY5foQeJCcgn8')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='maxpohlman',
token='DABABA0A96F91456F89EC9B246DD9386',
secret='g3WDOkq/JtTnACNYYCrsF7gS5WnsY5foQeJCcgn8')
library(magrittr)
library(tidyverse)
library(xlsx)
library(testthat)
library(haven)
library(lubridate)
library(stringr)
base_path <-'N:/Project/50172_Payment_Reconciliation/Restricted/DC1/SAS Server/50172_CCJR'
prices_path <- file.path(base_path, 'SYS_TARGET_PRICE/Target_Price_DB/DB.csv')
epi_path <- file.path(
'N:/Project/50331_CJR_Monitoring/Restricted/MA1/Data/Extraction/Mainframe Files',
'epi_y2018m04_full.sas7bdat'
)
duals_path <-
file.path('N:/Project/50331_CJR_Monitoring/Restricted/MA1/Data/Extraction/Mainframe Files/benedual_Y2018M04_FULL.csv')
self_path <- file.path(base_path, 'SYS_ADHOC/quarterly_spending_report/')
leading_zeros <- partial(str_pad, side = "left", pad = "0")
get_tp_period <- function(anchor_beg_dt) {
expect_that(anchor_beg_dt, is.Date)
case_when(
anchor_beg_dt < ymd('20161001') ~ 'B12C16F16',
anchor_beg_dt < ymd('20170101') ~ 'B12C16F17',
anchor_beg_dt < ymd('20171001') ~ 'B12C17F17',   ##MAX
anchor_beg_dt < ymd('20180101') ~ 'B34C17F18',
anchor_beg_dt < ymd('20181001') ~ 'B34C18F18',
TRUE                            ~ NA_character_
)
}
# Read and process prices and episodes
prices <-
prices_path %>%
read_csv(col_types = cols(.default = 'c')) %>%
select(
TARGET_PRICE, episode_period, CCN, DRG, FRACTURE,
STD_TARGET_PRICE, TP_eff_st_dt, CREATED_DATE ##MAX
) %>%
mutate(
CCN = leading_zeros(CCN, 6),
TP_PERIOD = get_tp_period(as.Date(TP_eff_st_dt, "%m/%d/%Y")), ##MAX
FRACTURE = c('No Fracture', 'Fracture')[as.integer(FRACTURE) + 1],
DRG.FRACTURE = paste0(DRG, ' ', FRACTURE)
) %>% mutate(CREATED_DATE = ymd(CREATED_DATE)) %>% group_by(CCN, DRG.FRACTURE, TP_PERIOD) %>%
filter(max(CREATED_DATE) == CREATED_DATE) %>% ungroup() %T>%
save(file = file.path(self_path, 'prices.RData'))
get_perf_year <- function(dt) {
expect_that(dt, is.Date)
case_when(
dt <= ymd('20161003') ~ 1L,
dt <= ymd('20171003') ~ 2L,
dt <= ymd('20181003') ~ 3L,
TRUE                  ~ NA_integer_
)
}
is_perf_year <- function(dt, year) get_perf_year(dt) == year
episodes_raw <- epi_path %>% read_sas
episodes <-
episodes_raw %>%
filter(region_number != -9, BPCI_OVERLAP == 0, CJR == 1) %>%
select(
EPI_ID, BENE_SK, CCN = CJR_PROV, CJR, region_number, DRG = ANCHOR_DRG_CD,
FRACTURE, ANCHOR_BEG_DT, ANCHOR_END_DT, EPI_TOTAL, BPCI_OVERLAP
) %>%
mutate(
PY1 = is_perf_year(ANCHOR_END_DT, 1),
PY2 = is_perf_year(ANCHOR_END_DT, 2),
PY3 = is_perf_year(ANCHOR_END_DT, 3), ##MAX
TP_PERIOD = get_tp_period(ANCHOR_BEG_DT),
FRACTURE = c('No Fracture', 'Fracture')[FRACTURE + 1],
DRG.FRACTURE = paste0(DRG, ' ', FRACTURE),
anchor_beg_year = year(ANCHOR_BEG_DT),
anchor_beg_qtr = quarter(ANCHOR_BEG_DT)
) %>%
left_join(
prices %>% select(-FRACTURE) ,
by = c('CCN', 'DRG.FRACTURE', 'TP_PERIOD')
) %T>%
save(file = file.path(self_path, 'episodes.RData'))
duals <-
duals_path %>%
read_csv(col_types = cols(.default = 'c'))
duals$BENE_DUAL_MDCD %>% as.factor %>% summary
duals_benesk <-
duals %>%
filter(BENE_DUAL_MDCD == 'Y') %>%
`$`(BENE_SK) %>%
unique
most_recent_q <-
episodes %>%
filter(anchor_beg_year == 2017, anchor_beg_qtr == 4)
# Num of nondual benes: Total minus those that are duals
# of Medicare FFS only beneficiaries during last quarter
n_distinct(most_recent_q$BENE_SK) -
sum(unique(most_recent_q$BENE_SK) %in% duals_benesk)
# Num of dual benes
# # of Medicare & Medicaid dual eligible beneficiaries during last quarter
{unique(most_recent_q$BENE_SK) %in% duals_benesk} %>% sum
# The total number of health care providers participating in the model during most recent quarter
n_distinct(most_recent_q$CCN)
# Number of beneficiaries that participated in most recent quarter
n_distinct(most_recent_q$BENE_SK)
# Number of beneficiaries that participated, ever
n_distinct(episodes$BENE_SK)
expect_equal(episodes$STD_TARGET_PRICE %>% is.na %>% sum, 0)
expect_equal(sum(episodes$STD_TARGET_PRICE == 0, na.rm = TRUE), 0)
# Make table of spending and n_epi aggregated by year and qtr
out_table <-
episodes %>%
group_by(anchor_beg_year, anchor_beg_qtr) %>%
summarise(
n_epi = n(),
target_spending = STD_TARGET_PRICE %>% as.numeric %>% sum,
actual_spending = EPI_TOTAL %>% as.numeric %>% sum
) %>%
as.data.frame %T>%
save(file = file.path(self_path, 'out_table.RData')) %T>%
write.xlsx(
file = file.path(self_path, 'output', paste0('quarterly_spending_', today(), '.xlsx')),
row.names = F
)
n_distinct(most_recent_q$BENE_SK) -
sum(unique(most_recent_q$BENE_SK) %in% duals_benesk)
# Num of dual benes
# # of Medicare & Medicaid dual eligible beneficiaries during last quarter
{unique(most_recent_q$BENE_SK) %in% duals_benesk} %>% sum
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
